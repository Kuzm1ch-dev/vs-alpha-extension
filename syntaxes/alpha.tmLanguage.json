{
    "name": "Alpha",
    "scopeName": "source.alpha",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#variables"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.alpha",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.alpha",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.alpha",
                    "match": "\\b(if|else|while|for|return|var|import|fun|class|this)\\b"
                },
                {
                    "name": "constant.language.alpha",
                    "match": "\\b(true|false|nil)\\b"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.alpha",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.alpha",
                    "match": "\\\\."
                }
            ]
        },
        "numbers": {
            "name": "constant.numeric.alpha",
            "match": "\\b[0-9]+(\\.([0-9]+))?\\b"
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.alpha",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\("
                },
                {
                    "name": "support.function.alpha",
                    "match": "\\b(print|input|toString|toNumber|toBool|substring|len)\\b"
                }
            ]
        },
        "variables": {
            "name": "variable.other.alpha",
            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
    }
}